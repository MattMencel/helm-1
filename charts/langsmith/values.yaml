# Default values for the langsmith helm chart. Refer to documentation on individual values for help with configuration.

# -- Provide a name in place of `langsmith`
nameOverride: ""
# -- String to fully override `"langsmith.fullname"`
fullnameOverride: ""
# -- Annotations that will be applied to all resources created by the chart
commonAnnotations: {}
# -- Labels that will be applied to all resources created by the chart
commonLabels: {}

images:
   # -- Secrets with credentials to pull images from a private registry. Specified as name: value.
  imagePullSecrets: []
  backendImage:
    repository: "docker.io/langchain/langchainplus-backend"
    pullPolicy: IfNotPresent
    tag: "f65c152"
  frontendImage:
    repository: "docker.io/langchain/langchainplus-frontend-dynamic"
    pullPolicy: IfNotPresent
    tag: "f65c152"
  hubBackendImage:
    repository: "docker.io/langchain/langchainhub-backend"
    pullPolicy: IfNotPresent
    tag: "f65c152"
  playgroundImage:
    repository: "docker.io/langchain/langchainplus-playground"
    pullPolicy: IfNotPresent
    tag: "f65c152"
  postgresImage:
    repository: "docker.io/postgres"
    pullPolicy: IfNotPresent
    tag: "14.7"
  redisImage:
    repository: "docker.io/redis"
    pullPolicy: IfNotPresent
    tag: "7"
  clickhouseImage:
    repository: "docker.io/clickhouse/clickhouse-server"
    pullPolicy: Always
    tag: "23.9"

ingress:
  hostname: ""
  subdomain: ""
  enabled: false
  ingressClassName: ""
  annotations: {}
  labels: {}
  tls: []

config:
  existingSecretName: ""
  openaiApiKey: ""
  langsmithLicenseKey: ""
  oauth:
    enabled: false
    oauthClientId: ""
    oauthIssuerUrl: ""

backend:
  name: "backend"
  containerPort: 1984
  deployment:
    replicaCount: 1
    labels: {}
    annotations: {}
    podSecurityContext: {}
    securityContext: {}
    resources: {}
#      limits:
#        cpu: 1000m
#        memory: 1Gi
#      requests:
#        cpu: 200m
#        memory: 500Mi
    extraEnv: []
    sidecars: []
    nodeSelector: {}
    tolerations: []
    affinity: {}
    volumes: []
    volumeMounts: []
  migrations:
    enabled: true
    replicaCount: 1
    labels: {}
    annotations: {}
    podSecurityContext: {}
    securityContext: {}
    resources: {}
#      limits:
#        cpu: 1000m
#        memory: 1Gi
#      requests:
#        cpu: 200m
#        memory: 500Mi
    extraEnv: []
    sidecars: []
    nodeSelector: {}
    tolerations: []
    affinity: {}
    volumes: []
    volumeMounts: []
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80
  service:
    type: ClusterIP
    port: 1984
    labels: {}
    annotations: {}
    loadBalancerSourceRanges: []
    loadBalancerIP: ""
  serviceAccount:
    create: true
    name: ""
    labels: {}
    annotations: {}

clickhouse:
  name: "clickhouse"
  external:
    # If enabled, use the following values to connect to an external database. This will also disable the
    # creation of a clickhouse stateful-set and service.
    enabled: false
    host: ""
    port: "8123"
    nativePort: "9000"
    user: "default"
    password: "password"
    database: "default"
    existingSecretName: ""
  containerHttpPort: 8123
  containerNativePort: 9000
  statefulSet:
    labels: {}
    annotations: {}
    podSecurityContext: {}
    securityContext: {}
    resources: {}
    nodeSelector: {}
    tolerations: []
    affinity: {}
    volumes: []
    volumeMounts: []
    persistence:
      size: 8Gi
      storageClassName: ""
  service:
    type: ClusterIP
    httpPort: 8123
    nativePort: 9000
    labels: {}
    annotations: {}
    loadBalancerSourceRanges: []
    loadBalancerIP: ""
  serviceAccount:
    create: true
    name: ""
    labels: {}
    annotations: {}

frontend:
  name: "frontend"
  containerPort: 8080
  existingConfigMapName: ""
  deployment:
    replicaCount: 1
    labels: {}
    annotations: {}
    podSecurityContext: {}
    securityContext: {}
    resources: {}
#      limits:
#        cpu: 1000m
#        memory: 1Gi
#      requests:
#        cpu: 200m
#        memory: 500Mi
    extraEnv: []
    sidecars: []
    nodeSelector: {}
    tolerations: []
    affinity: {}
    volumes: []
    volumeMounts: []
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80
  service:
    type: LoadBalancer
    httpPort: 80
    httpsPort: 443
    labels: {}
    annotations: {}
    loadBalancerSourceRanges: []
    loadBalancerIP: ""
  serviceAccount:
    create: true
    name: ""
    labels: {}
    annotations: {}

hubBackend:
  name: "hub-backend"
  containerPort: 1985
  deployment:
    replicaCount: 1
    labels: {}
    annotations: {}
    podSecurityContext: {}
    securityContext: {}
    resources: {}
#      limits:
#        cpu: 1000m
#        memory: 1Gi
#      requests:
#        cpu: 200m
#        memory: 500Mi
    extraEnv: []
    sidecars: []
    nodeSelector: {}
    tolerations: []
    affinity: {}
    volumes: []
    volumeMounts: []
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80
  service:
    type: ClusterIP
    port: 1985
    labels: {}
    annotations: {}
    loadBalancerSourceRanges: []
    loadBalancerIP: ""
  serviceAccount:
    create: true
    name: ""
    labels: {}
    annotations: {}

playground:
  name: "playground"
  containerPort: 3001
  deployment:
    replicaCount: 1
    labels: {}
    annotations: {}
    podSecurityContext: {}
    securityContext: {}
    resources: {}
#      limits:
#        cpu: 1000m
#        memory: 1Gi
#      requests:
#        cpu: 200m
#        memory: 500Mi
    extraEnv: []
    sidecars: []
    nodeSelector: {}
    tolerations: []
    affinity: {}
    volumes: []
    volumeMounts: []
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80
  service:
    type: ClusterIP
    port: 3001
    labels: {}
    annotations: {}
    loadBalancerSourceRanges: []
    loadBalancerIP: ""
  serviceAccount:
    create: true
    name: ""
    labels: {}
    annotations: {}

postgres:
  name: "postgres"
  external:
    # If enabled, use the following values to connect to an external database. This will also disable the
    # creation of a postgres stateful-set and service.
    enabled: false
    host: ""
    port: "5432"
    user: "postgres"
    password: "postgres"
    database: "postgres"
    schema: "public"
    # If connection string is specified, we will ignore all above values and use the connection string instead.
    # Do not include the driver name(something like "postgres://" in the connection string.
    connectionUrl: ""
    existingSecretName: ""
  containerPort: 5432
  statefulSet:
    labels: {}
    annotations: {}
    podSecurityContext: {}
    securityContext: {}
    resources: {}
#      limits:
#        cpu: 4000m
#        memory: 16Gi
#      requests:
#        cpu: 1000m
#        memory: 4Gi
    extraEnv: []
    sidecars: []
    nodeSelector: {}
    tolerations: []
    affinity: {}
    volumes: []
    volumeMounts: []
    persistence:
      enabled: false
      size: 8Gi
      storageClassName: ""
  service:
    type: ClusterIP
    port: 5432
    labels: {}
    annotations: {}
    loadBalancerSourceRanges: []
    loadBalancerIP: ""
  serviceAccount:
    create: true
    name: ""
    labels: {}
    annotations: {}

queue:
  name: "queue"
  deployment:
    replicaCount: 1
    labels: {}
    annotations: {}
    podSecurityContext: {}
    securityContext: {}
    resources: {}
#      limits:
#        cpu: 1000m
#        memory: 1Gi
#      requests:
#        cpu: 200m
#        memory: 500Mi
    extraEnv: []
    sidecars: []
    nodeSelector: {}
    tolerations: []
    affinity: {}
    volumes: []
    volumeMounts: []
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80
  serviceAccount:
    create: true
    name: ""
    labels: {}
    annotations: {}

redis:
  name: "redis"
  external:
    # If enabled, use the following values to connect to an external redis instance. This will also disable the
    # creation of a redis stateful-set and service.
    enabled: false
    connectionUrl: ""
    existingSecretName: ""
  containerPort: 6379
  statefulSet:
    labels: {}
    annotations: {}
    podSecurityContext: {}
    securityContext: {}
    resources: {}
#      limits:
#        cpu: 4000m
#        memory: 16Gi
#      requests:
#        cpu: 1000m
#        memory: 2Gi
    extraEnv: []
    sidecars: []
    nodeSelector: {}
    tolerations: []
    affinity: {}
    volumes: []
    volumeMounts: []
    persistence:
      enabled: false
      size: 8Gi
      storageClassName: ""
  service:
    type: ClusterIP
    port: 6379
    labels: {}
    annotations: {}
    loadBalancerSourceRanges: []
    loadBalancerIP: ""
  serviceAccount:
    create: true
    name: ""
    labels: {}
    annotations: {}
